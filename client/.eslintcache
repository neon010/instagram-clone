[{"C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\index.js":"1","C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\App.js":"2","C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\components\\Navbar.js":"3","C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\components\\Screens\\Home.js":"4","C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\components\\Screens\\Signin.js":"5","C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\components\\Screens\\Signup.js":"6","C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\components\\Screens\\Profile.js":"7","C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\components\\Screens\\createPost.js":"8","C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\reducers\\userReducer.js":"9","C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\components\\Screens\\UserProfile.js":"10","C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\components\\Screens\\SubscribesUserPost.js":"11"},{"size":222,"mtime":1609131656659,"results":"12","hashOfConfig":"13"},{"size":1750,"mtime":1609658810931,"results":"14","hashOfConfig":"13"},{"size":3733,"mtime":1609762523257,"results":"15","hashOfConfig":"13"},{"size":5555,"mtime":1609752547036,"results":"16","hashOfConfig":"13"},{"size":2720,"mtime":1609768361382,"results":"17","hashOfConfig":"13"},{"size":3518,"mtime":1609768452268,"results":"18","hashOfConfig":"13"},{"size":3879,"mtime":1609756069643,"results":"19","hashOfConfig":"13"},{"size":3040,"mtime":1609768482732,"results":"20","hashOfConfig":"13"},{"size":558,"mtime":1609651986804,"results":"21","hashOfConfig":"13"},{"size":5007,"mtime":1609754491487,"results":"22","hashOfConfig":"13"},{"size":5395,"mtime":1609680517247,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"huz50b",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"26"},"C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\index.js",[],["52","53"],"C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\App.js",["54","55"],"import React, {useEffect,createContext,useReducer,useContext} from \"react\";\nimport './App.css';\nimport {BrowserRouter as Router, Route, Switch, useHistory} from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./components/Screens/Home\";\nimport Signin from \"./components/Screens/Signin\";\nimport Signup from \"./components/Screens/Signup\";\nimport Profile from \"./components/Screens/Profile\";\nimport CreatePost from \"./components/Screens/createPost\";\nimport {reducer, initialState} from \"./reducers/userReducer\"\nimport UserProfile from \"./components/Screens/UserProfile\";\nimport SubscribesUserPost from \"./components/Screens/SubscribesUserPost\";\n\n\nexport const UserContext = createContext();\n\nconst Routing = () =>{\n  const history = useHistory();\n  const {state,dispatch} = useContext(UserContext);\n  useEffect(()=>{\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    if(user){\n      dispatch({type:\"USER\", payload:user});\n    }else{\n      history.push(\"/signin\");\n    }\n  }, []);\n\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={Home}/>\n      <Route path=\"/signin\" exact component={Signin}/>\n      <Route path=\"/signup\" exact component={Signup}/>\n      <Route path=\"/profile\" exact component={Profile}/>\n      <Route path=\"/createPost\" exact component={CreatePost}/>\n      <Route path=\"/profile/:userid\"  component={UserProfile}/>\n      <Route path=\"/myfollowingpost\"  component={SubscribesUserPost}/>\n    </Switch>\n  )\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <UserContext.Provider value={{state, dispatch}}>\n      <Router>\n        <Navbar/>\n        <Routing />\n      </Router>\n    </UserContext.Provider>\n\n  );\n}\n\nexport default App;\n","C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\components\\Navbar.js",[],"C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\components\\Screens\\Home.js",["56"],"import React, { useState,useEffect ,useContext } from \"react\";\r\nimport {UserContext} from '../../App';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction Home(){\r\n    const [data,setData] = useState([]);\r\n    const {state} = useContext(UserContext);\r\n\r\n\r\n    useEffect(()=>{\r\n        fetch(\"/allpost\", {\r\n            headers:{\r\n                \"auth-token\": localStorage.getItem(\"jwt\")\r\n            }\r\n        }).then(res=>res.json())\r\n            .then(result=>{\r\n                setData(result);\r\n            })\r\n    },[])\r\n\r\n\r\n    const likePost = (id)=>{\r\n        fetch('/like',{\r\n            method:\"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"auth-token\": localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                postId:id\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n          const newData = data.map(item=>{\r\n              if(item._id === result._id){\r\n                  return result\r\n              }else{\r\n                  return item\r\n              }\r\n          })\r\n          setData(newData)\r\n        }).catch(err=>{\r\n            console.log(err)\r\n        })\r\n}\r\n    const unlikePost = (id)=>{\r\n        fetch('/unlike',{\r\n            method:\"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"auth-token\":localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                postId:id\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n        const newData = data.map(item=>{\r\n            if(item._id === result._id){\r\n                return result\r\n            }else{\r\n                return item\r\n            }\r\n        })\r\n        setData(newData)\r\n        }).catch(err=>{\r\n        console.log(err)\r\n    })\r\n}\r\nconst makeComment = (text,postId)=>{\r\n    fetch('/comment',{\r\n        method:\"put\",\r\n        headers:{\r\n            \"Content-Type\":\"application/json\",\r\n            \"auth-token\": localStorage.getItem(\"jwt\")\r\n        },\r\n        body:JSON.stringify({\r\n            postId,\r\n            text\r\n        })\r\n    }).then(res=>res.json())\r\n    .then(result=>{\r\n        const newData = data.map(item=>{\r\n          if(item._id === result._id){\r\n              return result\r\n          }else{\r\n              return item\r\n          }\r\n       })\r\n      setData(newData)\r\n    }).catch(err=>{\r\n        console.log(err)\r\n    })\r\n}\r\n\r\nconst deletePost = (postid)=>{\r\n    fetch(`/deletepost/${postid}`,{\r\n        method:\"delete\",\r\n        headers:{\r\n            \"auth-token\":localStorage.getItem(\"jwt\")\r\n        }\r\n    }).then(res=>res.json())\r\n    .then(result=>{\r\n        const newData = data.filter(item=>{\r\n            return item._id !== result._id\r\n        })\r\n        setData(newData)\r\n    })\r\n}\r\n\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            {data.map(item=> {\r\n                return (\r\n                    <div className=\"card home-card\" key={item._id}>\r\n                            <h5 style={{padding:\"5px\"}}>\r\n                                <Link to={item.postedBy._id !== state._id ? `/profile/${item.postedBy._id}` : \"/profile\"}>\r\n                                    <img src={item.postedBy.pic} alt=\"profile-pic\" className=\"avatar\" style={{marginRight:\"10px\"}}/>{item.postedBy.name}\r\n                                </Link> {item.postedBy._id === state._id \r\n                            && <i className=\"material-icons\" style={{\r\n                                float:\"right\"\r\n                            }} \r\n                            onClick={()=>deletePost(item._id)}\r\n                            >delete</i>\r\n\r\n                            }</h5>\r\n\r\n                        <div className=\"card-image\">\r\n                            <img className=\"img\" \r\n                                src={item.photo} alt=\"post image\"/>\r\n                        </div>\r\n                        <div className=\"card-content\">\r\n                            {item.likes.includes(state._id)\r\n                            ? \r\n                             <i className=\"material-icons\"\r\n                                    onClick={()=>{unlikePost(item._id)}}\r\n                              >thumb_down</i>\r\n                            : \r\n                            <i className=\"material-icons\"\r\n                            onClick={()=>{likePost(item._id)}}\r\n                            >thumb_up</i>\r\n                            }\r\n                            <h6>{item.likes.length} likes</h6>\r\n                            <h6>{item.title}</h6>\r\n                            <p>{item.body}</p>\r\n                            {\r\n                                    item.comments.map(record=>{\r\n                                        return(\r\n                                        <h6 key={record._id}><span style={{fontWeight:\"500\"}}>{record.postedBy.name}</span> {record.text}</h6>\r\n                                        )\r\n                                    })\r\n                                }\r\n                                <form onSubmit={(e)=>{\r\n                                    e.preventDefault()\r\n                                    makeComment(e.target[0].value,item._id)\r\n                                }}>\r\n                                  <input type=\"text\" placeholder=\"add a comment\" />  \r\n                                </form>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Home","C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\components\\Screens\\Signin.js",[],"C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\components\\Screens\\Signup.js",["57"],"C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\components\\Screens\\Profile.js",["58","59"],"import React, { useEffect, useState,useContext } from \"react\";\r\nimport {UserContext} from \"../../App\";\r\n\r\nfunction Profile(){\r\n    const [myPost, setMyPost] = useState([]);\r\n    const {state, dispatch} = useContext(UserContext);\r\n    const [image, setImage] = useState(\"\");\r\n\r\n    useEffect(()=>{\r\n        fetch(\"/mypost\", {\r\n            headers:{\r\n                \"auth-token\": localStorage.getItem(\"jwt\")\r\n            }\r\n        }).then(res=>res.json())\r\n            .then(result=>{\r\n                setMyPost(result);\r\n            })\r\n    },[]);\r\n\r\n    useEffect(()=>{\r\n        if(image){\r\n         const data = new FormData();\r\n         data.append(\"file\",image);\r\n         data.append(\"upload_preset\",\"insta-clone\");\r\n         data.append(\"cloud_name\",\"mycloud213\");\r\n         fetch(\"https://api.cloudinary.com/v1_1/mycloud213/image/upload\",{\r\n             method:\"post\",\r\n             body:data\r\n         })\r\n         .then(res=>res.json())\r\n         .then(data=>{\r\n     \r\n        \r\n            fetch('/updatepic',{\r\n                method:\"put\",\r\n                headers:{\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"auth-token\": localStorage.getItem(\"jwt\")\r\n                },\r\n                body:JSON.stringify({\r\n                    pic:data.url\r\n                })\r\n            }).then(res=>res.json())\r\n            .then(result=>{\r\n                localStorage.setItem(\"user\", JSON.stringify({...state, pic:result.pic}));\r\n                dispatch({type:\"UPDATEPIC\", payload:result.pic});\r\n                window.location.reload();\r\n            })\r\n        \r\n         })\r\n         .catch(err=>{\r\n             console.log(err);\r\n         })\r\n        }\r\n     },[image])\r\n\r\n     const updatePhoto = (file)=>{\r\n         setImage(file)\r\n     }\r\n\r\n     console.log(state);\r\n\r\n    return (\r\n        <div style={{maxWidth:\"600px\", margin:\"0 auto\"}}>\r\n            <div\r\n            style={{display:\"flex\", justifyContent:\"space-around\", margin:\"18px 0px\", borderBottom:\"1px solid grey\"}}>\r\n                <div>\r\n                    <img \r\n                    style={{width:\"160px\", height:\"160px\", borderRadius:\"50%\"}}\r\n                    src= {state? state.pic:\"https://res.cloudinary.com/mycloud213/image/upload/v1609481336/default_men_image_fvwyfl.png\"}\r\n                    />\r\n                    <div  className=\"file-field input-field\" style={{margin:\"10px\"}}>\r\n                        <div className=\"btn #64b5f6 blue darken-1\">\r\n                            <span>Update pic</span>\r\n                            <input type=\"file\" onChange={(e)=>updatePhoto(e.target.files[0])} />\r\n                        </div>\r\n                        <div className=\"file-path-wrapper\">\r\n                            <input className=\"file-path validate\" type=\"text\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    \r\n                </div>\r\n                <div>\r\n                    <h4>{state ? state.name : \"loading\"}</h4>\r\n                    <h4>{state ? state.email : \"loading\"}</h4>\r\n                    <div style={{display:\"flex\", justifyContent:\"space-between\", width:\"108%\"}}>\r\n                        <h6>{myPost.length} post</h6>\r\n                        <h6>{state.followers === undefined || null ? 0 : state.followers.length} follower</h6>\r\n                        <h6>{state.following === undefined || null ? 0 : state.following.length} following</h6>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"gallery\">\r\n                {myPost.map(item=>{\r\n                    return (\r\n                        <img className=\"item\" alt={item.title} key={item._id} src={item.photo} />\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Profile","C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\components\\Screens\\createPost.js",["60"],"C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\reducers\\userReducer.js",[],"C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\components\\Screens\\UserProfile.js",["61","62"],"import React, { useEffect, useState,useContext } from \"react\";\r\nimport {UserContext} from \"../../App\";\r\nimport {useParams} from  \"react-router-dom\"\r\n\r\nfunction UserProfile(){\r\n\r\n    const {state,dispatch} = useContext(UserContext);\r\n    const [userProfile,setProfile] = useState(null);\r\n    const {userid} = useParams();\r\n    const [showfollow,setShowFollow] = useState(state.following ? !state.following.includes(userid):true);\r\n    \r\n    useEffect(()=>{\r\n        fetch(`/user/${userid}`,{\r\n            headers:{\r\n                \"auth-token\": localStorage.getItem(\"jwt\")\r\n            }\r\n        }).then(res=>res.json())\r\n        .then(result=>{          \r\n             setProfile(result)\r\n        })\r\n     },[])\r\n\r\n    const followUser = ()=>{\r\n        fetch('/follow',{\r\n            method:\"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"auth-token\":localStorage.getItem('jwt')\r\n            },\r\n            body:JSON.stringify({\r\n                followId:userid\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(data=>{        \r\n            dispatch({type:\"UPDATE\", payload:{following:data.following,followers:data.followers}})\r\n             localStorage.setItem(\"user\",JSON.stringify(data))\r\n             setProfile((prevState)=>{\r\n                 return {\r\n                     ...prevState,\r\n                     user:{\r\n                         ...prevState.user,\r\n                         followers:[...prevState.user.followers,data._id]\r\n                        }\r\n                 }\r\n             })\r\n            setShowFollow(false)\r\n        })\r\n    }\r\n    const unfollowUser = ()=>{\r\n        fetch('/unfollow',{\r\n            method:\"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"auth-token\":localStorage.getItem('jwt')\r\n            },\r\n            body:JSON.stringify({\r\n                unfollowId:userid\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(data=>{\r\n            \r\n            dispatch({type:\"UPDATE\",payload:{following:data.following,followers:data.followers}})\r\n             localStorage.setItem(\"user\",JSON.stringify(data))\r\n            \r\n             setProfile((prevState)=>{\r\n                const newFollower = prevState.user.followers.filter(item=>item !== data._id )\r\n                 return {\r\n                     ...prevState,\r\n                     user:{\r\n                         ...prevState.user,\r\n                         followers:newFollower\r\n                        }\r\n                 }\r\n             })\r\n             setShowFollow(true);             \r\n        })\r\n    }\r\n    return (\r\n        <>\r\n        {userProfile ?\r\n        <div style={{maxWidth:\"550px\",margin:\"0px auto\"}}>\r\n            <div style={{\r\n                display:\"flex\",\r\n                justifyContent:\"space-around\",\r\n                margin:\"18px 0px\",\r\n                borderBottom:\"1px solid grey\"\r\n            }}>\r\n                <div>\r\n                    <img style={{width:\"160px\",height:\"160px\",borderRadius:\"80px\"}}\r\n                    src=\"https://images.unsplash.com/photo-1593104547489-5cfb3839a3b5?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=736&q=80\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>{userProfile.user.name}</h4>\r\n                    <h5>{userProfile.user.email}</h5>\r\n                    <div style={{display:\"flex\",justifyContent:\"space-between\",width:\"108%\"}}>\r\n                        <h6>{userProfile.posts.length} posts</h6>\r\n                        <h6>{userProfile.user.followers.length} followers</h6>\r\n                        <h6>{userProfile.user.following.length} following</h6>\r\n                    </div>\r\n                    {showfollow?\r\n                    <button \r\n                    style={{margin:\"10px\"}} \r\n                    className=\"btn waves-effect waves-light #64b5f6 blue darken-1\"\r\n                    onClick={()=>followUser()}\r\n                    >\r\n                         Follow\r\n                    </button>\r\n                     : \r\n                     <button\r\n                     style={{margin:\"10px\"}}\r\n                     className=\"btn waves-effect waves-light #64b5f6 blue darken-1\"\r\n                     onClick={()=>unfollowUser()}\r\n                     >\r\n                    UnFollow\r\n                     </button>\r\n                     }\r\n                </div>\r\n            </div>\r\n      \r\n            <div className=\"gallery\">\r\n                {\r\n                    userProfile.posts.map(item=>{\r\n                        return(\r\n                         <img key={item._id} className=\"item\" src={item.photo} alt={item.title}/>  \r\n                        )\r\n                    })\r\n                }\r\n \r\n            \r\n            </div>\r\n        </div>\r\n        \r\n        \r\n        : <h2>loading...!</h2>}\r\n        \r\n        </>\r\n    )\r\n};\r\n\r\nexport default UserProfile","C:\\Users\\user\\Desktop\\instagram clone\\client\\src\\components\\Screens\\SubscribesUserPost.js",["63"],"import React,{useState,useEffect,useContext} from 'react'\r\nimport {UserContext} from '../../App'\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nconst SubscribesUserPost = ()=>{\r\n    const [data,setData] = useState([]);\r\n    const {state} = useContext(UserContext);\r\n    \r\n    useEffect(()=>{\r\n        fetch(\"/getsubpost\", {\r\n            headers:{\r\n                \"auth-token\": localStorage.getItem(\"jwt\")\r\n            }\r\n        }).then(res => res.json()).then(data => setData(data))\r\n    }, []);\r\n\r\n    const likePost = (id)=>{\r\n        fetch('/like',{\r\n            method:\"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"auth-token\": localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                postId:id\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n          const newData = data.map(item=>{\r\n              if(item._id === result._id){\r\n                  return result\r\n              }else{\r\n                  return item\r\n              }\r\n          })\r\n          setData(newData)\r\n        }).catch(err=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    \r\n    const unlikePost = (id)=>{\r\n        fetch('/unlike',{\r\n            method:\"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"auth-token\":localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                postId:id\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n        const newData = data.map(item=>{\r\n            if(item._id === result._id){\r\n                return result\r\n            }else{\r\n                return item\r\n            }\r\n        })\r\n        setData(newData)\r\n        }).catch(err=>{\r\n        console.log(err)\r\n    })\r\n}\r\n    const makeComment = (text,postId)=>{\r\n        fetch('/comment',{\r\n            method:\"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"auth-token\": localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                postId,\r\n                text\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n            const newData = data.map(item=>{\r\n              if(item._id === result._id){\r\n                  return result\r\n              }else{\r\n                  return item\r\n              }\r\n           })\r\n          setData(newData)\r\n        }).catch(err=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n    const deletePost = (postid)=>{\r\n        fetch(`/deletepost/${postid}`,{\r\n            method:\"delete\",\r\n            headers:{\r\n                \"auth-token\":localStorage.getItem(\"jwt\")\r\n            }\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n            const newData = data.filter(item=>{\r\n                return item._id !== result._id\r\n            })\r\n            setData(newData)\r\n        })\r\n    }\r\n\r\n   return (\r\n       <div className=\"home\">\r\n           {\r\n               data.map(item => {\r\n                   return (\r\n                    <div className=\"card home-card\" key={item._id}>\r\n                    <h5 style={{padding:\"5px\"}}>\r\n                        <Link to={item.postedBy._id !== state._id ? `/profile/${item.postedBy._id}` : \"/profile\" }>\r\n                            <img src={item.postedBy.pic} alt=\"profile-pic\" className=\"avatar\" style={{marginRight:\"10px\"}}/>{item.postedBy.name}\r\n                        </Link> {item.postedBy._id === state._id \r\n                    && <i className=\"material-icons\" style={{\r\n                        float:\"right\"\r\n                    }} \r\n                    onClick={()=>deletePost(item._id)}\r\n                    >delete</i>\r\n\r\n                    }</h5>\r\n\r\n                <div className=\"card-image\">\r\n                    <img className=\"img\" \r\n                        src={item.photo} alt=\"post image\"/>\r\n                </div>\r\n                <div className=\"card-content\">\r\n                    {item.likes.includes(state._id)\r\n                    ? \r\n                     <i className=\"material-icons\"\r\n                            onClick={()=>{unlikePost(item._id)}}\r\n                      >thumb_down</i>\r\n                    : \r\n                    <i className=\"material-icons\"\r\n                    onClick={()=>{likePost(item._id)}}\r\n                    >thumb_up</i>\r\n                    }\r\n                    <h6>{item.likes.length} likes</h6>\r\n                    <h6>{item.title}</h6>\r\n                    <p>{item.body}</p>\r\n                    {\r\n                            item.comments.map(record=>{\r\n                                return(\r\n                                <h6 key={record._id}><span style={{fontWeight:\"500\"}}>{record.postedBy.name}</span> {record.text}</h6>\r\n                                )\r\n                            })\r\n                        }\r\n                        <form onSubmit={(e)=>{\r\n                            e.preventDefault()\r\n                            makeComment(e.target[0].value,item._id)\r\n                        }}>\r\n                          <input type=\"text\" placeholder=\"add a comment\" />  \r\n                        </form>\r\n                </div>\r\n            </div>\r\n                   )\r\n               })\r\n           }\r\n        </div>\r\n   )\r\n}\r\n\r\n\r\nexport default SubscribesUserPost;",{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":19,"column":10,"nodeType":"70","messageId":"71","endLine":19,"endColumn":15},{"ruleId":"72","severity":1,"message":"73","line":27,"column":6,"nodeType":"74","endLine":27,"endColumn":8,"suggestions":"75"},{"ruleId":"76","severity":1,"message":"77","line":130,"column":29,"nodeType":"78","endLine":131,"endColumn":68},{"ruleId":"72","severity":1,"message":"79","line":19,"column":7,"nodeType":"74","endLine":19,"endColumn":12,"suggestions":"80"},{"ruleId":"72","severity":1,"message":"81","line":55,"column":8,"nodeType":"74","endLine":55,"endColumn":15,"suggestions":"82"},{"ruleId":"83","severity":1,"message":"84","line":68,"column":21,"nodeType":"78","endLine":71,"endColumn":23},{"ruleId":"72","severity":1,"message":"85","line":38,"column":7,"nodeType":"74","endLine":38,"endColumn":12,"suggestions":"86"},{"ruleId":"72","severity":1,"message":"87","line":21,"column":8,"nodeType":"74","endLine":21,"endColumn":10,"suggestions":"88"},{"ruleId":"83","severity":1,"message":"84","line":89,"column":21,"nodeType":"78","endLine":91,"endColumn":23},{"ruleId":"76","severity":1,"message":"77","line":127,"column":21,"nodeType":"78","endLine":128,"endColumn":60},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["91"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'uploadFields'. Either include it or remove the dependency array.",["92"],"React Hook useEffect has missing dependencies: 'dispatch' and 'state'. Either include them or remove the dependency array.",["93"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has missing dependencies: 'body', 'history', and 'title'. Either include them or remove the dependency array.",["94"],"React Hook useEffect has a missing dependency: 'userid'. Either include it or remove the dependency array.",["95"],"no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},"Update the dependencies array to be: [dispatch, history]",{"range":"106","text":"107"},"Update the dependencies array to be: [uploadFields, url]",{"range":"108","text":"109"},"Update the dependencies array to be: [dispatch, image, state]",{"range":"110","text":"111"},"Update the dependencies array to be: [body, history, title, url]",{"range":"112","text":"113"},"Update the dependencies array to be: [userid]",{"range":"114","text":"115"},[1017,1019],"[dispatch, history]",[499,504],"[uploadFields, url]",[1708,1715],"[dispatch, image, state]",[1152,1157],"[body, history, title, url]",[710,712],"[userid]"]